module;

// 貨幣發行者
entity issuer {
    key _id: text = '3653f21e-4518-4cba-adb6-8748c47c8d05';
    mutable name: text;
    mutable point: integer = 1000000000000;
    created_at: timestamp = op_context.last_block_time;
    mutable updated_at: timestamp = op_context.last_block_time;
}

// 使用者
entity user {
    key _id: text;
    mutable name: text;
    mutable point: integer = 0;
    created_at: timestamp = op_context.last_block_time;
    mutable updated_at: timestamp = op_context.last_block_time;
}

// 頻道
entity channel {
    key _id: text;
    name: text;
    answer: integer;
    mutable is_open: boolean = true;
    mutable guess_count: integer = 0;
    mutable point: integer = 0;
    created_at: timestamp = op_context.last_block_time;
    mutable updated_at: timestamp = op_context.last_block_time;
}

// 頻道帳本
entity channel_ledger {
    index channel: channel;
    index user_id: user;
    from: text = '';
    to: text = '';
    guess_number: integer = 0;
    pay_point: integer = 0;
    memo: text = '';
    created_at: timestamp = op_context.last_block_time;
    mutable updated_at: timestamp = op_context.last_block_time;
}

function get_random_number(high: integer = 100): integer {
    if (high == 0) return 0; // avoid division by zero
    return (op_context.last_block_time - op_context.block_height - op_context.op_index) % high + 1;
}

// 初始化發行者點數
operation init() {
    if (issuer @? { ._id == '3653f21e-4518-4cba-adb6-8748c47c8d05' } != null) {
        update issuer @ { ._id == '3653f21e-4518-4cba-adb6-8748c47c8d05' } ( .point = 1000000000000 );
    } else {
        create issuer ( name = '點數發行商' );
    }
}

query getIssuer() {
    return issuer @ {
        ._id == '3653f21e-4518-4cba-adb6-8748c47c8d05'
    } (
        _id = ._id,
        name = .name,
        point = .point
    )
    .to_gtv_pretty();
}

operation registerUser(userId: text, userName: text) {
    require(user @? { ._id == userId } == null, '使用者已存在');
    create user ( _id = userId, name = userName );
}

query getUser(userId: text) {
    return user @ {
        ._id == userId
    } (
        _id = ._id,
        name = .name,
        point = .point,
        createdAt = .created_at,
        updatedAt = .updated_at
    )
    .to_gtv_pretty();
}

query getUserList() {
    return user @* { } ( _id = ._id, name = .name, point = .point, createdAt = .created_at ).to_gtv_pretty();
}

//索取點數, 固定100點
operation get_point(userId: text) {
    require(user @? { ._id == userId } != null, '使用者不存在');
    require(issuer @? { ._id == '3653f21e-4518-4cba-adb6-8748c47c8d05' } != null, '發行者不存在, 請先初始化發行者點數');
    val userDetail = user @ { ._id == userId };
    val issuerDetail = issuer @ { ._id == '3653f21e-4518-4cba-adb6-8748c47c8d05' };

    require(issuerDetail.point >= 100, '發行者點數不足');
    update issuer @ { ._id == issuerDetail._id } ( .point = issuerDetail.point - 100 );
    update user @ { ._id == userDetail._id } ( .point = user.point + 100 );
}

operation createChannel(channelId: text, channelName: text) {
    // val totalChannelNumber = (channel @* {}(._id)).size();
    val answer: integer = get_random_number(100);
    // create channel ( _id = (totalChannelNumber+1).to_text(), name = channelName, answer );
    require(channel @? { ._id == channelId } == null, '頻道已存在');
    create channel ( _id = channelId, name = channelName, answer );
}

query getChannel(channelId: text) {
    return channel @* { ._id == channelId } (
        _id = ._id,
        name = .name,
        isOpen = .is_open,
        point = .point,
        guessCount = .guess_count,
        createdAt = .created_at
    ).to_gtv_pretty();
}

query getChannelList() {
    return channel @* { } (
        _id = ._id,
        name = .name,
        isOpen = .is_open,
        guessCount = .guess_count,
        point = .point,
        createdAt = .created_at,
        updatedAt = .updated_at
    ).to_gtv_pretty();
}

operation guessNumber(channelId: text, userId: text, guessNumber: integer) {
    // 檢查使用者和頻道是否存在
    require(user @? { ._id == userId } != null, '使用者不存在');
    require(channel @? { ._id == channelId } != null, '頻道不存在');
    require(guessNumber >= 0 and guessNumber <= 100, '猜測數字必須在0到100之間');
    val channelDetail = channel @ { ._id == channelId };
    val userDetail = user @ { ._id == userId };

    log('使用者: ' + userDetail.name + ' 猜測頻道: ' + channelDetail.name + ' 猜測數字: ' + guessNumber.to_text());
    log('頻道 answer: ' + channelDetail.answer.to_text() + ' 頻道點數: ' + channelDetail.point.to_text());
    // 檢查頻道是否開啟
    // 檢查使用者點數是否足夠
    require(channelDetail.is_open == true, '頻道未開啟');
    require(userDetail.point >= 10, '使用者點數不足');

    //
    update user @ { ._id == userDetail._id } ( .point = user.point - 10 );
    update channel @ { ._id == channelDetail._id } (
        .guess_count = channel.guess_count + 1,
        .point = channel.point + 10
    );

    log('使用者: ' + userDetail.name + ' 支付頻道點數: 10 點');
    create channel_ledger (
        channel = channelDetail,
        user_id = userDetail,
        from = userDetail._id,
        to = channelDetail._id,
        guess_number = guessNumber,
        pay_point = 10,
        memo = 'Payment 10 points to channel'
    );

    if (guessNumber == channelDetail.answer) {
        log('使用者: ' + userDetail.name + ' 猜測正確!');
        update channel @ { ._id == channelDetail._id } ( .point = 0, .is_open = false );
        update user @ { ._id == userDetail._id } ( .point = user.point + channelDetail.point );

        log('使用者: ' + userDetail.name + ' 獲得頻道點數: ' + channelDetail.point.to_text());
        create channel_ledger (
            channel = channelDetail,
            user_id = userDetail,
            from = channelDetail._id,
            to = userDetail._id,
            guess_number = guessNumber,
            pay_point = channelDetail.point,
            memo = 'user: ' + userDetail._id + 'guess Hit!'
        );
    } else {
        log('使用者: ' + userDetail.name + ' 猜測錯誤');
        create channel_ledger (
            channel = channelDetail,
            user_id = userDetail,
            from = userDetail._id,
            to = channelDetail._id,
            guess_number = guessNumber,
            pay_point = 10,
            memo = 'not guess Hit!'
        );
    }
}

query getHistory(userId: text) {
    if (user @? { ._id == userId } == null) {
        return ''.to_gtv_pretty();
    } else {
        val userDetail = user @ { ._id == userId };
        return channel_ledger @* { .user_id == userDetail } (
            channel = .channel._id,
            userId = .user_id._id,
            from = .from,
            to = .to,
            guessNumber = .guess_number,
            payPoint = .pay_point,
            memo = .memo,
            createdAt = .created_at
        ).to_gtv_pretty();
    }
}

query getChannelHistory(channelId: text) {
    if (channel @? { ._id == channelId } == null) {
        return ''.to_gtv_pretty();
    } else {
        val channelDetail = channel @ { ._id == channelId };
        return channel_ledger @* { .channel == channelDetail } (
            channel = .channel._id,
            userId = .user_id._id,
            from = .from,
            to = .to,
            guessNumber = .guess_number,
            payPoint = .pay_point,
            memo = .memo,
            createdAt = .created_at
        ).to_gtv_pretty();
    }
}
// docker compose 如何刪除 volume
